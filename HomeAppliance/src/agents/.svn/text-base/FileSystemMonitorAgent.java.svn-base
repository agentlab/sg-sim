package agents;

import jade.content.lang.sl.*;
import jade.content.lang.*;
import jade.content.onto.Ontology;
import jade.core.Agent;
import jade.proto.SubscriptionResponder;
import jade.domain.DFService;
import jade.domain.FIPAException;
import jade.domain.FIPAAgentManagement.DFAgentDescription;
import jade.domain.FIPAAgentManagement.ServiceDescription;
import jade.lang.acl.ACLMessage;
import jade.lang.acl.MessageTemplate;
import onto.*;
import subscription.SubscrManager;

/**
 * 	Агент респондент. Проверяет список файлов на изменение
 * 	и отправляет сообщение агентам, подписавшимся на наблюдение за данным файлом
 * 	Имеет два поведения: SubscriptionResponder and FilePollingBehaviour.
 */
public class FileSystemMonitorAgent extends Agent {
	private static final long serialVersionUID = 3731134492500110874L;
	
	protected final String name = "FileSystemMonitorAgent"; // Имя агента на сервисе желтых страниц
	protected final String type = "MonitorAgent"; // Тип агента на сервисе желтых страниц
	
	private SubscriptionResponder dfSubscriptionResponder;
	private SubscrManager subManager;
	
	private Codec codec = new SLCodec(); // Кодек 
	private Ontology ontology = MessageOntology.getInstance(); //Онтология
	
	/**
	 * 	Регистрация сервиса на желтых страницах
	 *  и запуск поведения SubscriptionResponder
	 */
	@Override
	protected void setup() {
		System.out.println(getAID().getName() + " started.");
		
		getContentManager().registerLanguage(codec); // Регистрация кодека для ContentManager 
		getContentManager().registerOntology(ontology);	// Регистрация онтологии для ContentManager 

		// Регистрация сервиса на желтых страницах
		DFAgentDescription dfd = new DFAgentDescription();
		dfd.setName(getAID());
		ServiceDescription sd = new ServiceDescription();
		sd.setType(type); 
		sd.setName(name); 
		dfd.addServices(sd);
		try {
			DFService.register(this, dfd);
		} catch (FIPAException fe) {
			fe.printStackTrace();
		}
		
		// Инициализация SubscriptionManager
		subManager = new SubscrManager(this);
		// Шаблон сообщения 
		MessageTemplate mt = SubscriptionResponder.createMessageTemplate(ACLMessage.SUBSCRIBE);
		// Запуск поведения для общения агентов
		dfSubscriptionResponder = new SubscriptionResponder(this, mt, subManager);
		addBehaviour(dfSubscriptionResponder);
		// Вывод приветствия в консоль
		System.out.println("Agent " + getAID().getName() + " is ready.");
	}
	
	@Override
	protected void takeDown() {
		System.out.println("Agent " + getLocalName() + " is shutting down.");
	}
	
	/**
	 * 	Метод возвращает кодек
	 */
	public Codec getCodec()
	{
		return this.codec;
	}
	
	/**
	 * 	Метод возвращает онтологию
	 */
	public Ontology getOntology()
	{
		return this.ontology;
	}
}
