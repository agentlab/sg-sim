package behaviours;

import classes.Folder;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import jade.core.Agent;
import jade.core.behaviours.TickerBehaviour;
import subscription.SubscrManager;

/**
 * 	Поведение файлового менеджера. Считывает из файла folder.txt список наблюдения,
 *	проверяет на каждом такте файлы на изменение.
 * 	Если файл изменен вызывается метод handleChange из SubscrManager
 */
public class FilePollingBehaviour extends TickerBehaviour{
	private static final long serialVersionUID = 7786903538364903210L;
	private ArrayList<Folder> folders = new ArrayList<Folder>(); // Список системных папок для просмотра
	final Date d = new Date();
	protected SubscrManager subManager;
	private String FORMAT = "yyyy-MM-dd hh:mm:ss"; // Формат записи даты
	private SimpleDateFormat sdf = new SimpleDateFormat(FORMAT);
	
	/**
	 * 	Конструктор
	 */
	public FilePollingBehaviour(Agent a, long period, SubscrManager subManager) {
		super(a, period);
		this.subManager = subManager;
	}
	
	/**
	 * 	Метод добавляет файлы в список проверки из folder.txt
	 */
	@Override
	public void onStart() {
		// Вывод информации в консоль о запуске поведения
		System.out.println("FilePollingBehaviour is activated");
		FileReader file;
		try {
			file = new FileReader("files/folders.txt"); // Текстовый файл, где хранится список папод для наблюдения
			BufferedReader stream = new BufferedReader(file);
			String les = stream.readLine();
			// Пока не конец добавляем в список папок
			while(les != null ) {
				addFolder(les);
				les = stream.readLine();
			}	
		} catch (FileNotFoundException e) {
			System.out.println("FileNotFound");
			e.printStackTrace();
		} catch (IOException e) {
			System.out.println("IOException");
			e.printStackTrace();
		}
	}
	
	/**
	 * 	Метод на каждом такте проверяет список файлов на изменение,
	 * 	если найден измененный файл, то вызывается метод handleChange из SubscrManager
	 */
	@Override
	protected void onTick() {
		for (int i = 0; i < folders.size(); i++) {
			// Считывание даты изменеия файла
			d.setTime(folders.get(i).getFile().lastModified());
			// Сравнение текущей даты и даты с последнего измерения
			// Если они не равны
			if (!d.equals(folders.get(i).getLastDateMod())) {
				// Установка последней даты изменения папки 
				folders.get(i).setLastDateMod(d);
				// Вызов метода агента-респондента для передачи сообщений подписчикам
				subManager.handleChange(folders.get(i));
				// Вывод информации в консоль об именении файла
				System.out.println(folders.get(i).getPath() + " is changed " + sdf.format(d) + " " );
			}	
		}	
	}
	
	/**
	 * 	Добавление нового файла в список наблюдения,
	 * 	если такого файла еще нет в нем
	 */
	public void addFolder(String path){
		if (path != null && findFolder(path) < 0)
			folders.add(new Folder(path));
	}
	
	/**
	 *	Поиск файла по пути.
	 * 	Возвращает позицию в списке или -1, если файл не найден
	 */
	public int findFolder(String path){
		for (int i = 0; i < folders.size(); i++)
			if (path.equals(folders.get(i).getPath()))
				return i;
		return -1;
	}

}
