package behaviours;


import java.util.Date;

import onto.Message;
import onto.SendMessage;
import jade.content.lang.Codec.CodecException;
import jade.content.onto.OntologyException;
import jade.core.AID;
import jade.core.behaviours.TickerBehaviour;
import jade.domain.DFService;
import jade.domain.FIPAException;
import jade.domain.FIPANames;
import jade.domain.FIPAAgentManagement.DFAgentDescription;
import jade.lang.acl.ACLMessage;

import subscription.SubscrInitiator;
import agents.SubscriberAgent;

/**
 * Поведение ищет первого агента с совпадающими с шаблоном
 * Запускает SubscrInitiator
 * Затем удаляет само себя
 */
public class RegisterBehaviour extends TickerBehaviour {
	private static final long serialVersionUID = 3384651319762649616L;
	
	protected DFAgentDescription template;
	protected static  SubscriberAgent myAgent;

	/**
	 * Конструктор
	 */
	public RegisterBehaviour(DFAgentDescription template, SubscriberAgent a, long period) {
		super(a, period);
		this.template = template;
		myAgent = a;
	}

	/**
	 * Пока не найден респондент - идет поиск
	 */
	@Override
	protected void onTick() {
		// Получение списка агентов согласно шаблону
		DFAgentDescription[] result;
		try {
			result = DFService.search(myAgent, template);
			if (result.length > 0) {
				AID subscriptionAgent = result[0].getName();

				ACLMessage subscribe = createRequestMessage(myAgent, subscriptionAgent);
				subscribe.setPerformative(ACLMessage.SUBSCRIBE);
				subscribe.setProtocol(FIPANames.InteractionProtocol.FIPA_SUBSCRIBE);
				// Создание поведения StubscriptionInitiator (подписчика) 
				myAgent.addBehaviour(new SubscrInitiator((SubscriberAgent)myAgent, subscribe));
				// Удаление данного поведения
				stop();
			}
		} catch (FIPAException e) {
			e.printStackTrace();
		} 
	}
	
	/**
	 * Создание сообщения REQUEST
	 */
	protected static ACLMessage createRequestMessage(SubscriberAgent sender, AID receiver) {
		Date date = new Date();
		date.setTime(date.getTime() + 300000); // 5 минут начиная с текущего времени
		
		ACLMessage request = new ACLMessage(ACLMessage.REQUEST);
		request.setSender(sender.getAID());
		request.addReceiver(receiver);
		request.setProtocol(FIPANames.InteractionProtocol.FIPA_REQUEST);	
		request.setLanguage(sender.getCodec().getName()); // Установка языка
		request.setOntology(sender.getOntology().getName()); // Установка онтологии
		request.setReplyWith("rw" + sender.getName() + System.currentTimeMillis());
		request.setConversationId("conv" + sender.getName() + System.currentTimeMillis());
		// Создание контекста сообщения при помощи класса Message
		Message msg = new Message();
		msg.setFilePath(sender.getPath()); // Информация о пути к фалу
		msg.setLastDateMod(date); // Информация о дате подписки
		SendMessage smsg = new SendMessage();
		smsg.setMessage(msg);
		
		try {
			myAgent.getContentManager().fillContent(request, smsg); // оздание сообщения с помощью ContentManager
		} catch (CodecException e) {
			e.printStackTrace();
		} catch (OntologyException e) {
			e.printStackTrace();
		}
		return request;
	}
}

