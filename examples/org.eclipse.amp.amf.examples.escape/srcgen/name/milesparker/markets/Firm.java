package name.milesparker.markets;

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

import org.eclipse.core.runtime.IAdapterFactory;
import org.eclipse.amp.agf.IGraphicsAdapted;
import org.eclipse.amp.agf.IGraphicsAdapter;

import org.eclipse.swt.graphics.Color;
import org.eclipse.jface.viewers.IColorProvider;

import org.ascape.model.Agent;
import org.ascape.model.Cell;
import org.ascape.model.CellOccupant;
import org.ascape.model.HostCell;
import org.ascape.model.LocatedAgent;
import org.ascape.model.Scape;
import org.ascape.model.event.ScapeEvent;
import org.ascape.model.rule.Rule;
import org.ascape.model.rule.ExecuteThenUpdate;
import org.ascape.model.space.CollectionSpace;
import org.ascape.model.space.Coordinate;
import org.ascape.model.space.Coordinate2DDiscrete;
import org.ascape.model.space.Graph;
import org.ascape.model.space.Location;
import org.ascape.model.space.Singleton;
import org.ascape.runtime.NonGraphicRunner;
import org.ascape.util.Conditional;
import org.ascape.util.data.DataPoint;
import org.ascape.util.data.DataPointConcrete;
import org.ascape.util.vis.ColorFeature;
import org.ascape.util.vis.ColorFeatureConcrete;
import org.ascape.view.vis.ChartView;
import org.ascape.view.vis.GEFView;
import org.ascape.view.vis.GraphView;

import org.eclipse.amp.escape.runtime.extension.IAgentChild;

/**
 * <!-- begin-user-doc -->
 * Firm Java Implementation.
 * 
 * Generated by AMF for model: Markets.metaabm in project: org.eclipse.amp.amf.examples.escape 
 * <!-- end-user-doc -->
 * @generated
 */
public class Firm extends CellOccupant {

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int sharesOutstanding = 0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double lastEarnings = 0.0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double lastPrice = 1.0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int sharesInternal = 50000;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double priceEarningsRatio = 0.0;

	private List<IAgentChild> children;

	public List<IAgentChild> getChildren() {
		return children;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Constructs a new Firm.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Firm() {

		children = new ArrayList<IAgentChild>();

	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final long serialVersionUID = 89989998L;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static long nextUniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private long uniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public long getUID() {
		if (uniqueID == 0) {
			uniqueID = nextUniqueID++;
		}
		return uniqueID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Clones the agent, ensuring that a unique id is assigned.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object clone() {
		try {
			Firm clone = (Firm) super.clone();
			clone.uniqueID = 0;
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Markets getMarkets() {
		return (Markets) getScape().getScape();
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List getNetwork() {
		List network = new ArrayList();
		network.addAll(((Graph) getMarkets().getFirmInstruments().getSpace())
				.getNeighborsFor(this));
		network.addAll(((Graph) getMarkets().getTargetBuyFirms().getSpace())
				.getNeighborsFor(this));
		return network;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */

	public void startSimulationAgentChild(int timeStep) {
		if (timeStep == getRoot().getRunner().getEarliestPeriod()) {
			for (IAgentChild tmp : children) {
				tmp.startSimulation(timeStep);
			}
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */

	public void calculateTimeStep(int timeStep) {
		for (IAgentChild tmp : children) {
			tmp.calculate(timeStep);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * Initialize Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void intializeNonFramework() {
		setSharesInternal(getMarkets().getFirmSharesCount());
		double initialFirmValue = initialFirmValue();
		double initialFirmPrice = initialFirmPrice();
		setLastEarnings(initialFirmValue);
		setLastPrice(initialFirmPrice);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Calculate Initial Firm Value.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double initialFirmValue() {
		double initialFirmValueMinimum = getMarkets()
				.getInitialFirmValueMinimum();
		double initialFirmValueMaximum = getMarkets()
				.getInitialFirmValueMaximum();
		return randomInRange(initialFirmValueMinimum, initialFirmValueMaximum);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Modify Earnings Rule. Executed every period.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void modifyEarnings() {
		double earningMovementFactor = earningMovementFactor();
		double lastEarningsMultiplyEarningMovementFactor = getLastEarnings()
				* earningMovementFactor;
		setLastEarnings(lastEarningsMultiplyEarningMovementFactor);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Calculate Earning Movement Factor.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double earningMovementFactor() {
		double earningMovementFactorMinimum = getMarkets()
				.getEarningMovementFactorMinimum();
		double earningMovementFactorMaximum = getMarkets()
				.getEarningMovementFactorMaximum();
		return randomInRange(earningMovementFactorMinimum,
				earningMovementFactorMaximum);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Offer Shares Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void offerShares() {
		if (getSharesInternal() > 0) {
			int sharesInternalSubtractFirmSharesperInstrument = getSharesInternal()
					- getMarkets().getFirmSharesperInstrument();
			setSharesInternal(sharesInternalSubtractFirmSharesperInstrument);
			Instrument createInstrument = (Instrument) getMarkets()
					.getInstrumentScape().getSpace().newLocation(false);
			createInstrument.setStatus(StatusEnum.held);
			((org.ascape.model.space.Graph) getMarkets().getFirmInstruments()
					.getSpace()).addNeighborSafe(this, createInstrument, false);
			createInstrument.setOfferPrice(getLastPrice());
			createInstrument.setShares(getMarkets()
					.getFirmSharesperInstrument());
			Trader initialTrader = (Trader) getMarkets().getTraderScape()
					.findRandom();
			if (initialTrader != null) {
				((org.ascape.model.space.Graph) getMarkets()
						.getInstrumentHolders().getSpace()).addNeighborSafe(
						initialTrader, createInstrument, false);
				int incrementInstrumentCount = initialTrader
						.getInstrumentCount() + 1;
				initialTrader.setInstrumentCount(incrementInstrumentCount);
				offerShares();
			}

		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Calculate Initial Firm Price.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double initialFirmPrice() {
		double initialFirmPriceMinimum = getMarkets()
				.getInitialFirmPriceMinimum();
		double initialFirmPriceMaximum = getMarkets()
				.getInitialFirmPriceMaximum();
		return randomInRange(initialFirmPriceMinimum, initialFirmPriceMaximum);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Derive Price Earnings Ratio.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPriceEarningsRatio() {
		return getLastPrice() / getLastEarnings();
	}
	/**
	 * <!-- begin-user-doc -->
	 * Clear Offers Rule. Executed every period.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void clearOffers() {
		Conditional firmCondition = new Conditional() {

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			private static final long serialVersionUID = 6846144446402098985L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public boolean meetsCondition(Object firmCell) {
				if (firmCell instanceof Instrument) {
					Instrument firm = (Instrument) firmCell;
					return (firm.getStatus() == StatusEnum.ask);
				} else {
					return false;
				}
			}
		};
		List firmList = getMarkets().getInstrumentScape().find(firmCondition);
		for (Object nextFirm : firmList) {
			Instrument firm = (Instrument) (Instrument) nextFirm;
			if (firm != null) {
				firm.setStatus(StatusEnum.held);
			}
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Gets the Shares Outstanding property for Firm.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getSharesOutstanding() {
		return sharesOutstanding;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Shares Outstanding property for Firm.
	 * 
	 * @param _sharesOutstanding the new Shares Outstanding value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setSharesOutstanding(int _sharesOutstanding) {
		sharesOutstanding = _sharesOutstanding;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Last Earnings property for Firm.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getLastEarnings() {
		return lastEarnings;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Last Earnings property for Firm.
	 * 
	 * @param _lastEarnings the new Last Earnings value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setLastEarnings(double _lastEarnings) {
		lastEarnings = _lastEarnings;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Last Price property for Firm.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getLastPrice() {
		return lastPrice;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Last Price property for Firm.
	 * 
	 * @param _lastPrice the new Last Price value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setLastPrice(double _lastPrice) {
		lastPrice = _lastPrice;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Shares Internal property for Firm.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getSharesInternal() {
		return sharesInternal;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Shares Internal property for Firm.
	 * 
	 * @param _sharesInternal the new Shares Internal value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setSharesInternal(int _sharesInternal) {
		sharesInternal = _sharesInternal;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
		if (name == null) {
			return "Firm " + getUID();
		} else {
			return name;
		}
	}
}
