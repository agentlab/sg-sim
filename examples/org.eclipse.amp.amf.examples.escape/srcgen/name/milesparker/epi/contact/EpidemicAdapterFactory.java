package name.milesparker.epi.contact;

import org.eclipse.core.runtime.IAdapterFactory;

import org.ascape.model.Scape;

import org.eclipse.amp.agf.gef.IFigureProvider;
import org.eclipse.jface.viewers.IColorProvider;

/**
 * Epidemic Java Implementation.
 * A simple model of epidemic dynamics. We define individual agents with different disease states. The progression of disease moves from succeptible to exposed to infectious (either symptomatic or asymptomatic) to some outcome state. Agents can transmit infection to their immediate neighbors.

 For some background on the general approach, see Joshua M. Epstein. "Generative Social Science". 2006. Princeton. 

 Copyright 2009, Miles Parker. Released under Eclipse Public License. All uses should be attributed.
 * Generated by AMF for model: EpidemicContact.metaabm in project: org.eclipse.amp.amf.examples.escape 
 */

public class EpidemicAdapterFactory implements IAdapterFactory {

	private static IAdapterFactory singleton;

	Class[] adapters = new Class[]{IFigureProvider.class, IColorProvider.class};

	/**
	 * @param arg0
	 * @param arg1
	 * @return
	 * @see org.eclipse.core.runtime.IAdapterFactory#getAdapter(java.lang.Object, java.lang.Class)
	 */
	public Object getAdapter(Object agent, Class type) {
		if (type == IColorProvider.class) {

			if (agent instanceof Scape
					&& ((Scape) agent).getPrototypeAgent().getClass() == Individual.class) {
				return name.milesparker.epi.contact.IndividualStyle2DColorProvider
						.getDefault();
			}

		}

		if (type == IFigureProvider.class) {

			if (agent instanceof Scape
					&& ((Scape) agent).getPrototypeAgent().getClass() == Individual.class) {
				return name.milesparker.epi.contact.IndividualStyle2DFigureProvider
						.getDefault();
			}

		}

		return null;
	}

	/**
	 * @return
	 * @see org.eclipse.core.runtime.IAdapterFactory#getAdapterList()
	 */
	public Class[] getAdapterList() {
		return adapters;
	}

	public static IAdapterFactory getDefault() {
		return singleton;
	}
}
