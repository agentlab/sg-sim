package org.eclipse.amp.examples.heatbugs;

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

import org.eclipse.core.runtime.IAdapterFactory;
import org.eclipse.amp.agf.IGraphicsAdapted;
import org.eclipse.amp.agf.IGraphicsAdapter;

import org.eclipse.swt.graphics.Color;
import org.eclipse.jface.viewers.IColorProvider;

import org.ascape.model.Agent;
import org.ascape.model.Cell;
import org.ascape.model.CellOccupant;
import org.ascape.model.HostCell;
import org.ascape.model.LocatedAgent;
import org.ascape.model.Scape;
import org.ascape.model.event.ScapeEvent;
import org.ascape.model.rule.Rule;
import org.ascape.model.rule.ExecuteThenUpdate;
import org.ascape.model.space.CollectionSpace;
import org.ascape.model.space.Coordinate;
import org.ascape.model.space.Coordinate2DDiscrete;
import org.ascape.model.space.Graph;
import org.ascape.model.space.Location;
import org.ascape.model.space.Singleton;
import org.ascape.runtime.NonGraphicRunner;
import org.ascape.util.Conditional;
import org.ascape.util.data.DataPoint;
import org.ascape.util.data.DataPointConcrete;
import org.ascape.util.vis.ColorFeature;
import org.ascape.util.vis.ColorFeatureConcrete;
import org.ascape.view.vis.ChartView;
import org.ascape.view.vis.GEFView;
import org.ascape.view.vis.GraphView;

import org.eclipse.amp.escape.runtime.extension.IAgentChild;

/**
 * <!-- begin-user-doc -->
 * Heat Bug Java Implementation.
 * 
 * Generated by AMF for model: Heatbugs.metaabm in project: org.eclipse.amp.amf.examples.escape 
 * <!-- end-user-doc -->
 * @generated
 */
public class HeatBug extends CellOccupant {

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double idealTemperature = 0.0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double outputHeat = 0.0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double unhappiness = 0.0;

	private List<IAgentChild> children;

	public List<IAgentChild> getChildren() {
		return children;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Constructs a new Heat Bug.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public HeatBug() {

		children = new ArrayList<IAgentChild>();

	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final long serialVersionUID = 89989998L;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static long nextUniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private long uniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public long getUID() {
		if (uniqueID == 0) {
			uniqueID = nextUniqueID++;
		}
		return uniqueID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Clones the agent, ensuring that a unique id is assigned.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object clone() {
		try {
			HeatBug clone = (HeatBug) super.clone();
			clone.uniqueID = 0;
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Heatbugs getHeatbugs() {
		return (Heatbugs) getScape().getScape();
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */

	public void startSimulationAgentChild(int timeStep) {
		if (timeStep == getRoot().getRunner().getEarliestPeriod()) {
			for (IAgentChild tmp : children) {
				tmp.startSimulation(timeStep);
			}
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */

	public void calculateTimeStep(int timeStep) {
		for (IAgentChild tmp : children) {
			tmp.calculate(timeStep);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * Initialize Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void intializeNonFramework() {
		HeatCell heatBug = (HeatCell) ((org.ascape.model.space.Discrete) getHeatbugs()
				.getHeatGrid().getSpace()).findRandomAvailable();
		if (heatBug != null) {
			if (getHostScape() != ((Agent) heatBug).getScape()) {
				die();
				getHeatbugs().getHeatBugScape().add(this);
			}
			moveTo(heatBug);
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Seek Heat Rule Rule. Executed every period.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void seekHeatRule() {
		Location currentLocationLocation = this;
		if (currentLocationLocation != null) {
			HeatCell currentLocation = (HeatCell) ((org.ascape.model.CellOccupant) currentLocationLocation)
					.getHostCell();
			if (currentLocation != null) {
				double heatAddOutputHeat = currentLocation.getHeat()
						+ getOutputHeat();
				if (currentLocation.getHeat() < getIdealTemperature()) {
					HeatCell idealHeat = (HeatCell) ((org.ascape.model.space.Discrete) currentLocation
							.getHeatbugs().getHeatGrid().getSpace())
							.findMaximumWithin(currentLocation.getCoordinate(),
									MAXIMIZE_HEAT, HostCell.IS_AVAILABLE, true,
									1);
					if (idealHeat != null) {
						if (getHostScape() != ((Agent) idealHeat).getScape()) {
							die();
							getHeatbugs().getHeatBugScape().add(this);
						}
						moveTo(idealHeat);
					}
				}
				if (!(currentLocation.getHeat() < getIdealTemperature())) {
					HeatCell idealCool = (HeatCell) ((org.ascape.model.space.Discrete) currentLocation
							.getHeatbugs().getHeatGrid().getSpace())
							.findMinimumWithin(currentLocation.getCoordinate(),
									MINIMIZE_HEAT, HostCell.IS_AVAILABLE, true,
									1);
					if (idealCool != null) {
						if (getHostScape() != ((Agent) idealCool).getScape()) {
							die();
							getHeatbugs().getHeatBugScape().add(this);
						}
						moveTo(idealCool);
					}
				}
				currentLocation.setHeat(heatAddOutputHeat);
			}
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * A data point used within a search to find the Heat Cell with the maximized Heat value.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public final static DataPoint MAXIMIZE_HEAT = new DataPointConcrete(
			"Maximize heat") {

		/**
		 * <!-- begin-user-doc -->
		 * 
		 * <!-- end-user-doc -->
		 * @generated
		 */
		private static final long serialVersionUID = 3755810443335739012L;

		/**
		 * <!-- begin-user-doc -->
		 * 
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public double getValue(Object o) {
			return ((HeatCell) o).getHeat();
		}
	};
	/**
	 * <!-- begin-user-doc -->
	 * Initialize State Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void initializeState() {
		double idealTemperatureDraw = idealTemperatureDraw();
		double outputHeatDraw = outputHeatDraw();
		setIdealTemperature(idealTemperatureDraw);
		setOutputHeat(outputHeatDraw);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Calculate Ideal Temperature Draw.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double idealTemperatureDraw() {
		double idealTemperatureDrawMinimum = getHeatbugs()
				.getIdealTemperatureDrawMinimum();
		double idealTemperatureDrawMaximum = getHeatbugs()
				.getIdealTemperatureDrawMaximum();
		return randomInRange(idealTemperatureDrawMinimum,
				idealTemperatureDrawMaximum);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Calculate Output Heat Draw.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double outputHeatDraw() {
		double outputHeatDrawMinimum = getHeatbugs().getOutputHeatDrawMinimum();
		double outputHeatDrawMaximum = getHeatbugs().getOutputHeatDrawMaximum();
		return randomInRange(outputHeatDrawMinimum, outputHeatDrawMaximum);
	}
	/**
	 * <!-- begin-user-doc -->
	 * A data point used within a search to find the Heat Cell with the minimized Heat value.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public final static DataPoint MINIMIZE_HEAT = new DataPointConcrete(
			"Minimize heat") {

		/**
		 * <!-- begin-user-doc -->
		 * 
		 * <!-- end-user-doc -->
		 * @generated
		 */
		private static final long serialVersionUID = 3755810443335739012L;

		/**
		 * <!-- begin-user-doc -->
		 * 
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public double getValue(Object o) {
			return ((HeatCell) o).getHeat();
		}
	};
	/**
	 * <!-- begin-user-doc -->
	 * Derive Unhappiness.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getUnhappiness() {
		Location currentHeatCellLocation = this;
		if (currentHeatCellLocation != null) {
			HeatCell currentHeatCell = (HeatCell) ((org.ascape.model.CellOccupant) currentHeatCellLocation)
					.getHostCell();
			if (currentHeatCell != null) {
				double heatSubtractIdealTemperatureQuery = currentHeatCell
						.getHeat() - getIdealTemperature();
				return java.lang.Math.abs(heatSubtractIdealTemperatureQuery);
			}
		}
		return 0.0;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Gets the Ideal Temperature property for Heat Bug.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getIdealTemperature() {
		return idealTemperature;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Ideal Temperature property for Heat Bug.
	 * 
	 * @param _idealTemperature the new Ideal Temperature value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setIdealTemperature(double _idealTemperature) {
		idealTemperature = _idealTemperature;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Output Heat property for Heat Bug.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getOutputHeat() {
		return outputHeat;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Output Heat property for Heat Bug.
	 * 
	 * @param _outputHeat the new Output Heat value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setOutputHeat(double _outputHeat) {
		outputHeat = _outputHeat;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
		if (name == null) {
			return "Heat Bug " + getUID();
		} else {
			return name;
		}
	}
}
