package org.eclipse.amp.examples.heatbugs;

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

import org.eclipse.core.runtime.IAdapterFactory;
import org.eclipse.amp.agf.IGraphicsAdapted;
import org.eclipse.amp.agf.IGraphicsAdapter;

import org.eclipse.swt.graphics.Color;
import org.eclipse.jface.viewers.IColorProvider;

import org.ascape.model.Agent;
import org.ascape.model.Cell;
import org.ascape.model.CellOccupant;
import org.ascape.model.HostCell;
import org.ascape.model.LocatedAgent;
import org.ascape.model.Scape;
import org.ascape.model.event.ScapeEvent;
import org.ascape.model.rule.Rule;
import org.ascape.model.rule.ExecuteThenUpdate;
import org.ascape.model.space.CollectionSpace;
import org.ascape.model.space.Coordinate;
import org.ascape.model.space.Coordinate2DDiscrete;
import org.ascape.model.space.Graph;
import org.ascape.model.space.Location;
import org.ascape.model.space.Singleton;
import org.ascape.runtime.NonGraphicRunner;
import org.ascape.util.Conditional;
import org.ascape.util.data.DataPoint;
import org.ascape.util.data.DataPointConcrete;
import org.ascape.util.vis.ColorFeature;
import org.ascape.util.vis.ColorFeatureConcrete;
import org.ascape.view.vis.ChartView;
import org.ascape.view.vis.GEFView;
import org.ascape.view.vis.GraphView;

import org.eclipse.amp.escape.runtime.extension.IAgentChild;

/**
 * <!-- begin-user-doc -->
 * Heat Cell Java Implementation.
 * 
 * Generated by AMF for model: Heatbugs.metaabm in project: org.eclipse.amp.amf.examples.escape 
 * <!-- end-user-doc -->
 * @generated
 */
public class HeatCell extends HostCell {

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double heat = 0.0;

	private List<IAgentChild> children;

	public List<IAgentChild> getChildren() {
		return children;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Constructs a new Heat Cell.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public HeatCell() {

		children = new ArrayList<IAgentChild>();

	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final long serialVersionUID = 89989998L;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static long nextUniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private long uniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public long getUID() {
		if (uniqueID == 0) {
			uniqueID = nextUniqueID++;
		}
		return uniqueID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Clones the agent, ensuring that a unique id is assigned.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object clone() {
		try {
			HeatCell clone = (HeatCell) super.clone();
			clone.uniqueID = 0;
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Heatbugs getHeatbugs() {
		return (Heatbugs) getScape().getScape();
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double diffuseTemp;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final Rule DIFFUSE_RULE = new ExecuteThenUpdate("Diffuse") {

		/**
		 * <!-- begin-user-doc -->
		 * 
		 * <!-- end-user-doc -->
		 * @generated
		 */
		private static final long serialVersionUID = 6846144446402098983L;
		/**
		 * <!-- begin-user-doc -->
		 * Calculate and store diffusion value to neighbors.
		 * 
		 * @param agent the playing agent
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public void execute(Agent agent) {
			HeatCell heatCell = (HeatCell) agent;
			double valueSum = 0.0f;
			List neighbors = ((Cell) agent).findNeighbors();
			for (Object neighbor : neighbors) {
				HeatCell heatCellNeighbor = (HeatCell) neighbor;
				valueSum += heatCellNeighbor.getHeat();
			}
			valueSum -= neighbors.size() * heatCell.getHeat();
			valueSum /= neighbors.size();
			valueSum = heatCell.getHeat() + valueSum
					* heatCell.getHeatbugs().getDiffusionRate();
			valueSum *= 1.0f - heatCell.getHeatbugs().getEvaporationRate();
			heatCell.diffuseTemp = valueSum;
		}
		/**
		 * <!-- begin-user-doc -->
		 * Update diffusion value. Occurs only when all diffusion has been
		 * calculated.
		 * 
		 * @param agent the agent
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public void update(Agent agent) {
			HeatCell heatCell = (HeatCell) agent;
			heatCell.setHeat(heatCell.diffuseTemp);
		}
	};

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */

	public void startSimulationAgentChild(int timeStep) {
		if (timeStep == getRoot().getRunner().getEarliestPeriod()) {
			for (IAgentChild tmp : children) {
				tmp.startSimulation(timeStep);
			}
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */

	public void calculateTimeStep(int timeStep) {
		for (IAgentChild tmp : children) {
			tmp.calculate(timeStep);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * Watch for changes in Heat.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void watchHeat() {
		if (getHeat() > getHeatbugs().getMaximumHeat()) {
			setHeat(getHeatbugs().getMaximumHeat());
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Gets the Heat property for Heat Cell.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getHeat() {
		return heat;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Heat property for Heat Cell.
	 * 
	 * @param _heat the new Heat value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setHeat(double _heat) {
		heat = _heat;
		watchHeat();
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
		if (name == null) {
			return "Heat Cell " + getUID();
		} else {
			return name;
		}
	}
}
