package org.eclipse.amp.examples.heatbugs;

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

import org.eclipse.core.runtime.IAdapterFactory;
import org.eclipse.amp.agf.IGraphicsAdapted;
import org.eclipse.amp.agf.IGraphicsAdapter;

import org.eclipse.swt.graphics.Color;
import org.eclipse.jface.viewers.IColorProvider;

import org.ascape.model.Agent;
import org.ascape.model.Cell;
import org.ascape.model.CellOccupant;
import org.ascape.model.HostCell;
import org.ascape.model.LocatedAgent;
import org.ascape.model.Scape;
import org.ascape.model.event.ScapeEvent;
import org.ascape.model.rule.Rule;
import org.ascape.model.rule.ExecuteThenUpdate;
import org.ascape.model.space.CollectionSpace;
import org.ascape.model.space.Coordinate;
import org.ascape.model.space.Coordinate2DDiscrete;
import org.ascape.model.space.Graph;
import org.ascape.model.space.Location;
import org.ascape.model.space.Singleton;
import org.ascape.runtime.NonGraphicRunner;
import org.ascape.util.Conditional;
import org.ascape.util.data.DataPoint;
import org.ascape.util.data.DataPointConcrete;
import org.ascape.util.vis.ColorFeature;
import org.ascape.util.vis.ColorFeatureConcrete;
import org.ascape.view.vis.ChartView;
import org.ascape.view.vis.GEFView;
import org.ascape.view.vis.GraphView;

import org.eclipse.amp.escape.runtime.extension.IAgentChild;

/**
 * <!-- begin-user-doc -->
 * Heatbugs Java Implementation.
 * 
 * Generated by AMF for model: Heatbugs.metaabm in project: org.eclipse.amp.amf.examples.escape 
 * <!-- end-user-doc -->
 * @generated
 */
public class Heatbugs extends Scape implements IGraphicsAdapted {

	/**
	 * <!-- begin-user-doc -->
	 * The number of heat bugs to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int heatBugCount = 100;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double diffusionRate = 1.0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double evaporationRate = .01;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double idealTemperatureDrawMinimum = 135;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double idealTemperatureDrawMaximum = 240;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double outputHeatDrawMinimum = 23;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double outputHeatDrawMaximum = 76;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int maximumHeat = 340;
	/**
	 * <!-- begin-user-doc -->
	 * The horizontal extent of the space.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int heatGridWidth = 100;
	/**
	 * <!-- begin-user-doc -->
	 * The vertical extent of the space.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int heatGridHeight = 100;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private Scape heatGrid = null;

	private List<IAgentChild> children;

	public List<IAgentChild> getChildren() {
		return children;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Constructs a new Heatbugs.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Heatbugs() {

		children = new ArrayList<IAgentChild>();

	}

	//todo, make this a useful value for evaluating compatibility of different versions of generated classes

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final long serialVersionUID = 89989998L;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static long nextUniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private long uniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public long getUID() {
		if (uniqueID == 0) {
			uniqueID = nextUniqueID++;
		}
		return uniqueID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Clones the agent, ensuring that a unique id is assigned.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object clone() {
		try {
			Heatbugs clone = (Heatbugs) super.clone();
			clone.uniqueID = 0;
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	org.ascape.model.Scape heatBugScape;

	/**
	 * <!-- begin-user-doc -->
	 * Create an instance of Heat Bug that will be used to populate the heatBugScape.
	 * Overide to customize the prototype, for example to change the views created for a member scape.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeatBug createHeatBugPrototype() {
		HeatBug heatBug = new HeatBug();
		heatBug.setCoordinate(new Coordinate2DDiscrete(0, 0));
		return heatBug;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	static int next_vm_id;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	int vm_unique_id;

	/**
	 * <!-- begin-user-doc -->
	 * Creates the members of Heatbugs.
	 * <!-- end-user-doc --> 
	 * @generated
	 */
	public void createScape() {
		super.createScape();

		setName("Heatbugs");
		HeatBug heatBugProto = createHeatBugPrototype();
		heatBugScape = new Scape();
		heatBugScape.setName("Heat Bugs");
		heatBugScape.setPrototypeAgent(heatBugProto);
		heatBugScape.setExecutionOrder(Scape.RULE_ORDER);

		heatBugScape.setSize(getHeatBugCount());
		heatGrid = new Scape(new org.ascape.model.space.Array2DMoore());
		heatGrid.setExecutionOrder(Scape.RULE_ORDER);
		heatGrid.setPrototypeAgent(new HeatCell());
		heatGrid.setExtent(new org.ascape.model.space.Coordinate2DDiscrete(
				getHeatGridWidth(), getHeatGridHeight()));

		heatGrid.setName("Heat Grids");
		((CollectionSpace) heatGrid.getSpace()).setPeriodic(false);
		add(heatGrid);
		org.ascape.model.Scape heatCellScape = heatGrid;

		add(heatBugScape);

		heatBugProto.setHostScape(heatGrid);

		heatBugScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						heatBugScape.getName() + " Population") {

					/**
					 * <!-- begin-user-doc -->
					 * 
					 * <!-- end-user-doc -->
					 * @generated
					 */
					private static final long serialVersionUID = 684614444640209893L;

					/**
					 * <!-- begin-user-doc -->
					 * 
					 * <!-- end-user-doc -->
					 * @generated
					 */
					@SuppressWarnings("unused")
					public final boolean meetsCondition(Object object) {
						return true;
					}
				});
		heatBugScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Heat Bug Unhappiness") {

					/**
					 * <!-- begin-user-doc -->
					 * 
					 * <!-- end-user-doc -->
					 * @generated
					 */
					private static final long serialVersionUID = 6846144446402098985L;

					/**
					 * <!-- begin-user-doc -->
					 * 
					 * <!-- end-user-doc -->
					 * @generated
					 */
					public final double getValue(Object heatBug) {
						return ((HeatBug) heatBug).getUnhappiness();
					}
				});

		heatBugScape.addInitialRule(new Rule("Initialize") {

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			private static final long serialVersionUID = 6846144446402098982L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((org.eclipse.amp.examples.heatbugs.HeatBug) a)
						.intializeNonFramework();
			}
		});
		heatBugScape.addRule(new Rule("Seek Heat Rule") {

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			private static final long serialVersionUID = 6846144446402098981L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((org.eclipse.amp.examples.heatbugs.HeatBug) a).seekHeatRule();
			}
		});

		heatBugScape.addInitialRule(new Rule("Initialize State") {

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			private static final long serialVersionUID = 6846144446402098982L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((org.eclipse.amp.examples.heatbugs.HeatBug) a)
						.initializeState();
			}
		});
		heatCellScape.addRule(HeatCell.DIFFUSE_RULE);

	}

	/**
	 * <!-- begin-user-doc -->
	 * Creates UI views for Heatbugs.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void createGraphicViews() {
		super.createGraphicViews();
		createChartViews();
		create2DViews();
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void scapeSetup(ScapeEvent scapeEvent) {
		//Set the size of the scape populations, e.g. for mutable scapes that need to have their size reset

		heatBugScape.setSize(getHeatBugCount());
	}

	/**
	 * <!-- begin-user-doc -->
	 * Returns the Scape containing Heat Bugs.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public org.ascape.model.Scape getHeatBugScape() {
		return heatBugScape;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void createChartViews() {
		ChartView chart = new ChartView();

		final Heatbugs heatBugScape = new Heatbugs();
		heatBugScape.setRunner(new NonGraphicRunner());
		HeatBug heatBug = new HeatBug() {

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void requestUpdate() {
			}

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public Heatbugs getHeatbugs() {
				return heatBugScape;
			}
		};
		heatBugScape.add(heatBug);
		HostCell heatBugHost = new HostCell() {

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void requestUpdate() {
			}
		};
		heatBugHost.setOccupant((CellOccupant) heatBug);

		IColorProvider heatBugStyle2DColorProvider = new HeatBugStyle2DColorProvider();

		final Heatbugs heatCellScape = new Heatbugs();
		heatCellScape.setRunner(new NonGraphicRunner());
		HeatCell heatCell = new HeatCell() {

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void requestUpdate() {
			}

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public Heatbugs getHeatbugs() {
				return heatCellScape;
			}
		};
		heatCellScape.add(heatCell);

		IColorProvider heatCellStyle2DColorProvider = new HeatCellStyle2DColorProvider();
		addView(chart);
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void create2DViews() {
		addView(new GEFView());
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void createGraphViews() {
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IGraphicsAdapter getGraphicsAdapter() {
		return HeatbugsGraphicsAdapter.getDefault();
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private Color getInferredChartColor(Object agent,
			IColorProvider colorProvider) {
		Color color = colorProvider.getForeground(agent);
		if (color == ColorFeature.BLACK) {
			color = ColorFeatureConcrete.createHSB(
					(float) java.lang.Math.random() * 360f, 1.0f, 0.8f);
		}
		return color;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static void main(String[] args) {
		(new NonGraphicRunner())
				.openInstance("org.eclipse.amp.examples.heatbugs.Heatbugs");
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */

	public void startSimulationAgentChild(int timeStep) {
		if (timeStep == getRoot().getRunner().getEarliestPeriod()) {
			for (IAgentChild tmp : children) {
				tmp.startSimulation(timeStep);
			}
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */

	public void calculateTimeStep(int timeStep) {
		for (IAgentChild tmp : children) {
			tmp.calculate(timeStep);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Heat Bug Count property for Heatbugs.
	 * @return The number of heat bugs to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getHeatBugCount() {
		return heatBugCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Heat Bug Count property for Heatbugs.
	 * The number of heat bugs to create.
	 * @param _heatBugCount the new Heat Bug Count value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setHeatBugCount(int _heatBugCount) {
		heatBugCount = _heatBugCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Diffusion Rate property for Heatbugs.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getDiffusionRate() {
		return diffusionRate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Diffusion Rate property for Heatbugs.
	 * 
	 * @param _diffusionRate the new Diffusion Rate value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setDiffusionRate(double _diffusionRate) {
		diffusionRate = _diffusionRate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Evaporation Rate property for Heatbugs.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getEvaporationRate() {
		return evaporationRate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Evaporation Rate property for Heatbugs.
	 * 
	 * @param _evaporationRate the new Evaporation Rate value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setEvaporationRate(double _evaporationRate) {
		evaporationRate = _evaporationRate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Ideal Temperature Draw Minimum property for Heatbugs.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getIdealTemperatureDrawMinimum() {
		return idealTemperatureDrawMinimum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Ideal Temperature Draw Minimum property for Heatbugs.
	 * 
	 * @param _idealTemperatureDrawMinimum the new Ideal Temperature Draw Minimum value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setIdealTemperatureDrawMinimum(
			double _idealTemperatureDrawMinimum) {
		idealTemperatureDrawMinimum = _idealTemperatureDrawMinimum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Ideal Temperature Draw Maximum property for Heatbugs.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getIdealTemperatureDrawMaximum() {
		return idealTemperatureDrawMaximum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Ideal Temperature Draw Maximum property for Heatbugs.
	 * 
	 * @param _idealTemperatureDrawMaximum the new Ideal Temperature Draw Maximum value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setIdealTemperatureDrawMaximum(
			double _idealTemperatureDrawMaximum) {
		idealTemperatureDrawMaximum = _idealTemperatureDrawMaximum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Output Heat Draw Minimum property for Heatbugs.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getOutputHeatDrawMinimum() {
		return outputHeatDrawMinimum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Output Heat Draw Minimum property for Heatbugs.
	 * 
	 * @param _outputHeatDrawMinimum the new Output Heat Draw Minimum value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setOutputHeatDrawMinimum(double _outputHeatDrawMinimum) {
		outputHeatDrawMinimum = _outputHeatDrawMinimum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Output Heat Draw Maximum property for Heatbugs.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getOutputHeatDrawMaximum() {
		return outputHeatDrawMaximum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Output Heat Draw Maximum property for Heatbugs.
	 * 
	 * @param _outputHeatDrawMaximum the new Output Heat Draw Maximum value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setOutputHeatDrawMaximum(double _outputHeatDrawMaximum) {
		outputHeatDrawMaximum = _outputHeatDrawMaximum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Maximum Heat property for Heatbugs.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getMaximumHeat() {
		return maximumHeat;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Maximum Heat property for Heatbugs.
	 * 
	 * @param _maximumHeat the new Maximum Heat value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setMaximumHeat(int _maximumHeat) {
		maximumHeat = _maximumHeat;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Width property for Heat Grid.
	 * @return The horizontal extent of the space.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getHeatGridWidth() {
		return heatGridWidth;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Width property for Heat Grid.
	 * The horizontal extent of the space.
	 * @param _heatGridWidth the new Width value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setHeatGridWidth(int _heatGridWidth) {
		heatGridWidth = _heatGridWidth;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Height property for Heat Grid.
	 * @return The vertical extent of the space.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getHeatGridHeight() {
		return heatGridHeight;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Height property for Heat Grid.
	 * The vertical extent of the space.
	 * @param _heatGridHeight the new Height value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setHeatGridHeight(int _heatGridHeight) {
		heatGridHeight = _heatGridHeight;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Heat Grid property for Heatbugs.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Scape getHeatGrid() {
		return heatGrid;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Heat Grid property for Heatbugs.
	 * 
	 * @param _heatGrid the new Heat Grid value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setHeatGrid(Scape _heatGrid) {
		heatGrid = _heatGrid;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
		if (name == null) {
			return "Heatbugs " + getUID();
		} else {
			return name;
		}
	}
}
